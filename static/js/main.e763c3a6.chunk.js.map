{"version":3,"sources":["views/components/Header.tsx","views/pages/Home.tsx","views/pages/Weather.tsx","Router.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","menuList","name","age","className","map","item","index","key","to","path","Home","React","Component","Weather","props","getData","state","info","d","set","axios","get","url","then","res","data","value","weather","tempFixed","main","temp","feels_like","temp_min","temp_max","pressure","humidity","visibility","wind","speed","deg","gust","clouds","all","timeToDate","sys","sunrise","sunset","setState","catch","err","console","log","t","date","Date","hours","getHours","minutes","getMinutes","seconds","getSeconds","substr","toFixed","this","Router","exact","component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.e763c3a6.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from \"react-router-dom\";\n\ninterface menu{\n    name: string,\n    path: string\n}\ninterface info{\n    name : string,\n    age :number\n}\nconst Header = ({menuList}:any, {name, age}:info) =>{\n    return (\n        <header className=\"header\">\n            <div className=\"wrap\">\n                <nav className=\"header__nav\">\n                    <ul className=\"nav__menu__list\">\n                        {menuList.map((item:menu, index:number)=>{\n                            return (\n                            <li key={index}>\n                                <Link className=\"nav__menu__anchor\" to={item.path}>{item.name}</Link>\n                            </li>\n                            );\n                        })}\n                        \n                    </ul>\n                </nav>\n            </div>\n        </header>\n    );\n\n}\n\nexport default Header;","import React from 'react';\nimport '#/pages/home.scss';\n\nclass Home extends React.Component{\n\n    render(){\n        return (\n            <div className=\"contents\">\n                <div className=\"wrap\">\n                    <ul className=\"project__list\">\n                        <li className=\"project__item\">날씨</li>\n                        <li className=\"project__item\">계산기</li>\n                    </ul>\n                </div>\n            </div>\n        );\n    }\n\n}\n\nexport default Home;","import React from 'react';\nimport axios from 'axios';\nimport '#/pages/weather.scss';\n\ninterface State{\n\tinfo : info[]\n}\ninterface info{\n\tname: string,\n\tvalue: string | number \n}\n\nclass Weather extends React.Component<object,State>{\n\n\tconstructor(props:object){\n\t\tsuper(props);\n\n\t\tthis.getData();\n\n\t\tthis.state = {\n\t\t\t\tinfo : []\n\t\t};\n\t}\n\n\tpublic getData(): void {\n\t\t\t\n\t\tlet url = process.env._API;\n\t\tlet id = process.env._ACCESS_ID;\n\t\tlet cityId = 1835848;\n\t\tlet params = \"?id=\"+cityId+\"&APPID=\"+id;\n\t\tlet d;\n\t\tlet set;\n\t\taxios.get(url+params).then((res)=>{\n\t\t\t\n\t\t\td = res.data;\n\t\t\t\n\t\t\tset = [\n\t\t\t\t{ name: \"날씨\", value: d.weather[0]['main'] },\n\t\t\t\t{ name: \"날씨 요약\", value: d.weather[0]['description'] },\n\t\t\t\t{ name: \"기온\", value: this.tempFixed(d.main.temp) },\n\t\t\t\t{ name: \"체감온도\", value: this.tempFixed(d.main.feels_like) },\n\t\t\t\t{ name: \"최저기온\", value: this.tempFixed(d.main.temp_min) },\n\t\t\t\t{ name: \"최고기온\", value: this.tempFixed(d.main.temp_max) },\n\t\t\t\t{ name: \"기압\", value: d.main.pressure+' hPa' },\n\t\t\t\t{ name: \"습도\", value: d.main.humidity+ ' %' },\n\t\t\t\t{ name: \"시정\", value: d.visibility / 1000 +' km' },\n\t\t\t\t{ name: \"풍속\", value: d.wind.speed+ ' km/h' },\n\t\t\t\t{ name: \"풍향\", value: d.wind.deg },\n\t\t\t\t{ name: \"돌풍\", value: d.wind.gust? d.wind.gust : '없음' },\n\t\t\t\t{ name: \"구름\", value: d.clouds.all },\n\t\t\t\t{ name: \"일출\", value: this.timeToDate(d.sys.sunrise) },\n\t\t\t\t{ name: \"일몰\", value: this.timeToDate(d.sys.sunset) },\n\t\t\t]\n\n\t\t\tthis.setState({ info : set })\n\n\t\t}).catch((err)=>{\n\t\t\tconsole.log(err);\n\t\t});\t\t\t\t\t\t\t\t\n\t}\n\ttimeToDate(t:number){\n\t\t\n\t\tlet date = new Date(t * 1000);\n\t\tlet hours = date.getHours();\n\t\tlet minutes = \"0\" + date.getMinutes();\n\t\tlet seconds = \"0\" + date.getSeconds();\n\t\treturn hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\n\t}\n\ttempFixed(t:number):any{\n\t\tlet k = 273.15;\n\t\treturn ( t - k ).toFixed(1)+' °C'\n\t}\n\n\trender(){\n\t\treturn (\n\t\t\t<div className=\"contents\">\n\t\t\t\t<div className=\"wrap\">\n\t\t\t\t\t<ul className=\"weather__info__list\">\n\t\t\t\t\t\t{this.state.info.map( (item, index) => {\n\t\t\t\t\t\t\treturn  (\n\t\t\t\t\t\t\t\t<li className=\"weather__info__item\" key={index}>\n\t\t\t\t\t\t\t\t\t<span className=\"key\">{item.name}</span>\n\t\t\t\t\t\t\t\t\t<span className=\"value\">{item.value}</span>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t); \n\t\t\t\t\t\t})}\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Weather;","import React from 'react';\nimport { HashRouter, Switch, Route } from \"react-router-dom\";\nimport Header from '@/components/Header';\nimport { \n  Home,\n  Weather\n} from '@/pages';\n\n\nconst menuList = [\n  { name: 'Home', path: '/' },\n  { name: 'Weather', path: '/weather' },\n]\n\nclass Router extends React.Component{\n\n  render(){\n    return (\n      <HashRouter>\n        <div className=\"container\">\n          <Header menuList={ menuList } name=\"j\" age={1} />\n          <Switch>\n            <Route exact path=\"/\" component={Home}/>\n            <Route exact path=\"/Weather\" component={Weather}/>\n            {/* <Route path=\"/Project/:title\" component={Project}/> */}\n          </Switch>\n        </div>\n      </HashRouter>\n    );\n  }\n}\n\n\nexport default Router;\n","import React from 'react';\nimport Router from './Router';\nimport '#/app.scss';\n\nfunction App() {\n  return (\n    <Router/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}